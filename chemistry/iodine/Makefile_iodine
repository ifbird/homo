#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: Set here the F90 compiler and options
#       Pedefined compilers: INTEL, PGF, HPUX, LAHEY
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#COMPILER = G95
#COMPILER = LAHEY
COMPILER = INTEL
#COMPILER = PGF
#COMPILER = HPUX
#COMPILER = GFORTRAN

FC_G95     = g95
FOPT_G95   = -cpp -O -pg -fbounds-check -fimplicit-none  -Wall -ftrace=full

FC_LAHEY   = lf95
# More aggressive for production runs:
#FOPT_LAHEY = -Cpp --pca -O
# More checking for debugging:
FOPT_LAHEY = -Cpp --chk a,e,s,u --pca --ap -O0 -g --trap --trace --chkglobal

FC_INTEL   = ifort 
# More aggressive for production runs:
#FOPT_INTEL = -cpp -O -fp-model precise -pc80 -prec_div
# More checking for debugging:
FOPT_INTEL = -cpp -O0 -fp-model strict -implicitnone -ftrapuv \
              -debug all -check all -warn all

FC_PGF     = pgf90
# More aggressive for production runs:
FOPT_PGF   = -Mpreprocess -O -fast -pc 80 -Kieee
# More checking for debugging:
#FOPT_PGF   = -Mpreprocess -O0 -Mbounds -Mchkfpstk -Mchkptr -Mchkstk \
#             -Ktrap=fp -pc 80 -Kieee

FC_HPUX    = f90
FOPT_HPUX  = -O -u +Oall +check=on

FC_GFORTRAN     = gfortran
FOPT_GFORTRAN   = -cpp -O

# define FULL_ALGEBRA for non-sparse integration
FC   = $(FC_$(COMPILER))
FOPT = $(FOPT_$(COMPILER)) # -DFULL_ALGEBRA

LIBS =
#LIBS = -llapack -lblas

# Command to create Matlab mex gateway routines 
# Note: use $(FC) as the mex Fortran compiler
MEX  = mex

GENSRC = iodine_Precision.f90  \
	 iodine_Parameters.f90     \
	 iodine_Global.f90  

GENOBJ = iodine_Precision.o    \
	 iodine_Parameters.o       \
	 iodine_Global.o     

FUNSRC = iodine_Function.f90 
FUNOBJ = iodine_Function.o 

JACSRC = iodine_JacobianSP.f90  iodine_Jacobian.f90
JACOBJ = iodine_JacobianSP.o    iodine_Jacobian.o

HESSRC = iodine_HessianSP.f90   iodine_Hessian.f90
HESOBJ = iodine_HessianSP.o     iodine_Hessian.o

STMSRC = iodine_StoichiomSP.f90 iodine_Stoichiom.f90 
STMOBJ = iodine_StoichiomSP.o   iodine_Stoichiom.o

UTLSRC = iodine_Rates.f90 iodine_Util.f90 iodine_Monitor.f90
UTLOBJ = iodine_Rates.o   iodine_Util.o   iodine_Monitor.o

LASRC  = iodine_LinearAlgebra.f90 
LAOBJ  = iodine_LinearAlgebra.o   

STOCHSRC = iodine_Stochastic.f90 
STOCHOBJ = iodine_Stochastic.o 

MAINSRC = iodine_Main.f90   iodine_Initialize.f90   iodine_Integrator.f90 iodine_Model.f90
MAINOBJ = iodine_Main.o     iodine_Initialize.o     iodine_Integrator.o   iodine_Model.o 

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       objects needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ALLOBJ = $(GENOBJ) $(FUNOBJ) $(JACOBJ) $(HESOBJ) $(STMOBJ) \
	 $(UTLOBJ) $(LAOBJ)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       executables needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
all:    exe

exe:	$(ALLOBJ) $(MAINOBJ) 
	$(FC) $(FOPT) $(ALLOBJ) $(MAINOBJ) $(LIBS) -o iodine.exe

stochastic:$(ALLOBJ) $(STOCHOBJ) $(MAINOBJ)
	$(FC) $(FOPT) $(ALLOBJ) $(STOCHOBJ) $(MAINOBJ) $(LIBS) \
	-o iodine_stochastic.exe

mex:    $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O iodine_mex_Fun.f90     $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O iodine_mex_Jac_SP.f90  $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O iodine_mex_Hessian.f90 $(ALLOBJ)

clean:
	rm -f iodine*.o iodine*.mod \
	iodine*.dat iodine.exe iodine*.mexglx \
	iodine.map

distclean:
	rm -f iodine*.o iodine*.mod \
	iodine*.dat iodine.exe iodine.map \
	iodine*.f90 iodine_*.mexglx

iodine_Precision.o: iodine_Precision.f90 
	$(FC) $(FOPT) -c $<

iodine_Parameters.o: iodine_Parameters.f90 \
	            iodine_Precision.o
	$(FC) $(FOPT) -c $<

iodine_Monitor.o: iodine_Monitor.f90 \
	             iodine_Precision.o
	$(FC) $(FOPT) -c $<

iodine_Global.o: iodine_Global.f90 \
	            iodine_Parameters.o iodine_Precision.o
	$(FC) $(FOPT) -c $<

iodine_Initialize.o: iodine_Initialize.f90  $(GENOBJ) 
	$(FC) $(FOPT) -c $<

iodine_Function.o: iodine_Function.f90  $(GENOBJ) 
	$(FC) $(FOPT) -c $<

iodine_Stochastic.o: iodine_Stochastic.f90  $(GENOBJ) 
	$(FC) $(FOPT) -c $<

iodine_JacobianSP.o: iodine_JacobianSP.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

iodine_Jacobian.o: iodine_Jacobian.f90  $(GENOBJ) iodine_JacobianSP.o
	$(FC) $(FOPT) -c $<

iodine_LinearAlgebra.o: iodine_LinearAlgebra.f90 $(GENOBJ) iodine_JacobianSP.o
	$(FC) $(FOPT) -c $<

iodine_Rates.o: iodine_Rates.f90  $(GENOBJ) 
	$(FC) $(FOPT) -c $<

iodine_HessianSP.o: iodine_HessianSP.f90  $(GENOBJ)
	$(FC) $(FOPT) -c $<

iodine_Hessian.o:  iodine_Hessian.f90 $(GENOBJ) iodine_HessianSP.o
	$(FC) $(FOPT) -c $<

iodine_StoichiomSP.o: iodine_StoichiomSP.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

iodine_Stoichiom.o: iodine_Stoichiom.f90  $(GENOBJ) iodine_StoichiomSP.o
	$(FC) $(FOPT) -c $<

iodine_Util.o: iodine_Util.f90  $(GENOBJ) iodine_Monitor.o
	$(FC) $(FOPT) -c $<

iodine_Main.o: iodine_Main.f90  $(ALLOBJ) iodine_Initialize.o iodine_Model.o iodine_Integrator.o
	$(FC) $(FOPT) -c $<

iodine_Model.o: iodine_Model.f90  $(ALLOBJ) iodine_Integrator.o
	$(FC) $(FOPT) -c $<

iodine_Integrator.o: iodine_Integrator.f90  $(ALLOBJ)
	$(FC) $(FOPT) -c $<
